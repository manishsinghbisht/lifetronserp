//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lifetrons.Erp.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using Repository.Pattern.Ef6;

    public partial class Entities : DataContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<CampaignStatu> CampaignStatus { get; set; }
        public virtual DbSet<CampaignType> CampaignTypes { get; set; }
        public virtual DbSet<CaseReason> CaseReasons { get; set; }
        public virtual DbSet<CaseStatu> CaseStatus { get; set; }
        public virtual DbSet<DeliveryStatu> DeliveryStatus { get; set; }
        public virtual DbSet<Industry> Industries { get; set; }
        public virtual DbSet<JoiningRequest> JoiningRequests { get; set; }
        public virtual DbSet<LargeData> LargeDatas { get; set; }
        public virtual DbSet<LeadSource> LeadSources { get; set; }
        public virtual DbSet<LeadStatu> LeadStatus { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<OpportunityType> OpportunityTypes { get; set; }
        public virtual DbSet<Ownership> Ownerships { get; set; }
        public virtual DbSet<PriceBookLineItem> PriceBookLineItems { get; set; }
        public virtual DbSet<Priority> Priorities { get; set; }
        public virtual DbSet<QuoteStatu> QuoteStatus { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<Stage> Stages { get; set; }
        public virtual DbSet<TaskStatu> TaskStatus { get; set; }
        public virtual DbSet<WeightUnit> WeightUnits { get; set; }
        public virtual DbSet<Quote> Quotes { get; set; }
        public virtual DbSet<QuoteLineItem> QuoteLineItems { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<OrderLineItem> OrderLineItems { get; set; }
        public virtual DbSet<InvoiceStatu> InvoiceStatus { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Case> Cases { get; set; }
        public virtual DbSet<InvoiceLineItem> InvoiceLineItems { get; set; }
        public virtual DbSet<Opportunity> Opportunities { get; set; }
        public virtual DbSet<PriceBook> PriceBooks { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Campaign> Campaigns { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<Lead> Leads { get; set; }
        public virtual DbSet<CampaignMemberStatu> CampaignMemberStatus { get; set; }
        public virtual DbSet<CampaignMember> CampaignMembers { get; set; }
        public virtual DbSet<ProductFamily> ProductFamilies { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<Hierarchy> Hierarchies { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Target> Targets { get; set; }
        public virtual DbSet<EmailConfig> EmailConfigs { get; set; }
        public virtual DbSet<NoticeBoard> NoticeBoards { get; set; }
        public virtual DbSet<Colour> Colours { get; set; }
        public virtual DbSet<CostingGroup> CostingGroups { get; set; }
        public virtual DbSet<CostingSubGroup> CostingSubGroups { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
        public virtual DbSet<ItemClassification> ItemClassifications { get; set; }
        public virtual DbSet<ItemGroup> ItemGroups { get; set; }
        public virtual DbSet<ItemSubGroup> ItemSubGroups { get; set; }
        public virtual DbSet<ItemType> ItemTypes { get; set; }
        public virtual DbSet<Nature> Natures { get; set; }
        public virtual DbSet<Shape> Shapes { get; set; }
        public virtual DbSet<Style> Styles { get; set; }
        public virtual DbSet<BOM> BOMs { get; set; }
        public virtual DbSet<BOMLineItem> BOMLineItems { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<OperationBOMLineItem> OperationBOMLineItems { get; set; }
        public virtual DbSet<OpportunityLineItem> OpportunityLineItems { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Dispatch> Dispatches { get; set; }
        public virtual DbSet<DispatchLineItem> DispatchLineItems { get; set; }
        public virtual DbSet<JobIssueHead> JobIssueHeads { get; set; }
        public virtual DbSet<JobItemIssue> JobItemIssues { get; set; }
        public virtual DbSet<JobItemReceipt> JobItemReceipts { get; set; }
        public virtual DbSet<JobProductIssue> JobProductIssues { get; set; }
        public virtual DbSet<JobProductReceipt> JobProductReceipts { get; set; }
        public virtual DbSet<JobReceiptHead> JobReceiptHeads { get; set; }
        public virtual DbSet<StockIssueHead> StockIssueHeads { get; set; }
        public virtual DbSet<StockReceiptHead> StockReceiptHeads { get; set; }
        public virtual DbSet<EnterpriseStage> EnterpriseStages { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProdPlanDetail> ProdPlanDetails { get; set; }
        public virtual DbSet<ProdPlanRawBooking> ProdPlanRawBookings { get; set; }
        public virtual DbSet<ProcessTimeConfig> ProcessTimeConfigs { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ProcurementOrder> ProcurementOrders { get; set; }
        public virtual DbSet<ProcurementOrderDetail> ProcurementOrderDetails { get; set; }
        public virtual DbSet<ProcurementRequest> ProcurementRequests { get; set; }
        public virtual DbSet<ProcurementRequestDetail> ProcurementRequestDetails { get; set; }
        public virtual DbSet<StockItemIssue> StockItemIssues { get; set; }
        public virtual DbSet<StockItemReceipt> StockItemReceipts { get; set; }
        public virtual DbSet<StockProductIssue> StockProductIssues { get; set; }
        public virtual DbSet<StockProductReceipt> StockProductReceipts { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<WorkMonth> WorkMonths { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<Media> Media1 { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<FileRateTable> FileRateTables { get; set; }
    
        public virtual ObjectResult<sViewDashboardOpenWork_Result> sViewDashboardOpenWork(string ownerId, Nullable<System.Guid> orgId)
        {
            var ownerIdParameter = ownerId != null ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sViewDashboardOpenWork_Result>("sViewDashboardOpenWork", ownerIdParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<sViewDashboardMonthlyLeadOppComaprison_Result> sViewDashboardMonthlyLeadOppComaprison(string ownerId, Nullable<System.Guid> orgId)
        {
            var ownerIdParameter = ownerId != null ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sViewDashboardMonthlyLeadOppComaprison_Result>("sViewDashboardMonthlyLeadOppComaprison", ownerIdParameter, orgIdParameter);
        }
    
        public virtual int spConvertLeadToTasknOpp(Nullable<System.Guid> leadId, ObjectParameter returnValue)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spConvertLeadToTasknOpp", leadIdParameter, returnValue);
        }
    
        public virtual ObjectResult<spDepartmentOpenWork_Result> spDepartmentOpenWork(Nullable<System.Guid> departmentId, Nullable<System.Guid> orgId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepartmentOpenWork_Result>("spDepartmentOpenWork", departmentIdParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<spDepartmentPerformanceComaprisonMonthly_Result> spDepartmentPerformanceComaprisonMonthly(Nullable<System.Guid> departmentId, Nullable<System.Guid> orgId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDepartmentPerformanceComaprisonMonthly_Result>("spDepartmentPerformanceComaprisonMonthly", departmentIdParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<spOrgOpenWork_Result> spOrgOpenWork(Nullable<System.Guid> orgId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOrgOpenWork_Result>("spOrgOpenWork", orgIdParameter);
        }
    
        public virtual ObjectResult<spOrgPerformanceComaprisonMonthly_Result> spOrgPerformanceComaprisonMonthly(Nullable<System.Guid> orgId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOrgPerformanceComaprisonMonthly_Result>("spOrgPerformanceComaprisonMonthly", orgIdParameter);
        }
    
        public virtual ObjectResult<spTeamOpenWork_Result> spTeamOpenWork(Nullable<System.Guid> teamId, Nullable<System.Guid> orgId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(System.Guid));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTeamOpenWork_Result>("spTeamOpenWork", teamIdParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<spTeamPerformanceComaprisonMonthly_Result> spTeamPerformanceComaprisonMonthly(Nullable<System.Guid> teamId, Nullable<System.Guid> orgId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("TeamId", teamId) :
                new ObjectParameter("TeamId", typeof(System.Guid));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTeamPerformanceComaprisonMonthly_Result>("spTeamPerformanceComaprisonMonthly", teamIdParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<spUserOpenWork_Result> spUserOpenWork(string ownerId, Nullable<System.Guid> orgId)
        {
            var ownerIdParameter = ownerId != null ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserOpenWork_Result>("spUserOpenWork", ownerIdParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<spUserPerformanceComaprisonMonthly_Result> spUserPerformanceComaprisonMonthly(string ownerId, Nullable<System.Guid> orgId)
        {
            var ownerIdParameter = ownerId != null ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserPerformanceComaprisonMonthly_Result>("spUserPerformanceComaprisonMonthly", ownerIdParameter, orgIdParameter);
        }
    
        public virtual int spSetupOrg(Nullable<System.Guid> orgId, string userId)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(System.Guid));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetupOrg", orgIdParameter, userIdParameter);
        }
    }
}
